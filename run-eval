#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Std;

my %opts = ();
getopts('b:p:o:l:L:t:s:', \%opts);

die("Usage: run-eval [options] <truth.vcf> <test.vcf>
Options:
  -o STR      output prefix [auto]
  -b FILE     confident regions in BED [null]
  -p FILE     homopolymer positions generated by 'seqtk hrun' [null]
  -t FILE     list of contig name and length [null]
  -l INT      min INDEL length [0]
  -L INT      max INDEL length [inf]
  -s FILE     SDF directory generated by 'rtg format' [null]
") if @ARGV < 2;

# check path
my $exepath = $0 =~/^\S+\/[^\/\s]+/? $0 : &which($0);
my $root = $0 =~/^(\S+)\/[^\/\s]+/? $1 : undef;
$root = $exepath =~/^(\S+)\/[^\/\s]+/? $1 : undef if !defined($root);
die "ERROR: failed to locate the root directory\n" if !defined($root);

# infer prefix
my $prefix;
if (defined $opts{o}) {
	$prefix = $opts{o};
} elsif ($ARGV[1] =~ /\.vcf(\.gz?)$/) {
	$prefix = $ARGV[1];
	$prefix =~ s/\.vcf(\.gz?)$//;
	$prefix .= ".re";
}
die "ERROR: failed to infer the prefix for output. Please specify -o.\n" unless defined($prefix);

# test ##contig in VCF header
my @ctg_truth = &test_contig($ARGV[0]);
my @ctg_test = &test_contig($ARGV[1]);
die "ERROR: failed to find ##contig lines in both VCFs. Please specify -t.\n" if (@ctg_truth == 0 && @ctg_test == 0);
my $have_ctg = 0;
if (@ctg_test == 0 && @ctg_truth != 0) {
	&print_ctg(\@ctg_truth, "$prefix.ctg");
	$have_ctg = 1;
} elsif (@ctg_test != 0 && @ctg_truth == 0) {
	&print_ctg(\@ctg_test, "$prefix.ctg");
	$have_ctg = 1;
}

# reformat options
$opts{p} = defined($opts{p})? "-p $opts{p}" : "";
$opts{b} = defined($opts{b})? "-b $opts{b}" : "";
$opts{l} = defined($opts{l})? "-l $opts{l}" : "";
$opts{L} = defined($opts{L})? "-L $opts{L}" : "";
$opts{t} = defined($opts{t})? "-t $opts{t}" : $have_ctg? "-t $prefix.ctg" : "";
my $opts = "$opts{p} $opts{b} $opts{l} $opts{L}";

my ($cmd, $tmp);

open(OUT, ">$prefix.eval") || die;

warn "Running position-based evaluaton (hapdip distEval)...\n";
$cmd = "($root/k8 $root/hapdip.js distEval $opts $ARGV[0] $ARGV[1] > $prefix.de) 2> $prefix.log";
system($cmd) unless -f "$prefix.de";
$cmd = "($root/k8 $root/hapdip.js distEval -e $opts $ARGV[0] $ARGV[1] | $root/htsbox bgzip > $prefix.de-fnp.bed.gz) 2>> $prefix.log";
system($cmd) unless -f "$prefix.de-fnp.bed.gz";

open(FH, "$prefix.de") || die;
while (<FH>) {
	s/distEval/positional/;
	print OUT $_;
}
close(FH);

if (defined $opts{s}) {
	my @tot = (0, 0);
	my @fn = (0, 0, 0, 0);
	my @fp = (0, 0, 0, 0);

	warn "Normalizing the truth VCF...\n";
	$tmp = @ctg_truth? "" : $opts{t};
	$cmd = "($root/bgt atomize -S $tmp $ARGV[0] | $root/k8 $root/hapdip.js rtgprep $opts /dev/stdin | $root/htsbox bgzip > $prefix.truth.vcf.gz; $root/htsbox tabix -fpvcf $prefix.truth.vcf.gz) 2>> $prefix.log";
	system($cmd) unless -f "$prefix.truth.vcf.gz";

	warn "Normalizing the test VCF...\n";
	$tmp = @ctg_test? "" : $opts{t};
	$cmd = "($root/bgt atomize -S $tmp $ARGV[1] | $root/k8 $root/hapdip.js rtgprep $opts /dev/stdin | $root/htsbox bgzip > $prefix.test.vcf.gz; $root/htsbox tabix -fpvcf $prefix.test.vcf.gz) 2>> $prefix.log;";
	system($cmd) unless -f "$prefix.test.vcf.gz";

	warn "Running allele evaluation (rtg vcfeval --squash-ploidy)...\n";
	$cmd = "($root/rtg vcfeval -t $opts{s} -b $prefix.truth.vcf.gz -c $prefix.test.vcf.gz -o $prefix.vea --squash-ploidy) 2>> $prefix.log";
	system($cmd) unless -d "$prefix.vea";

	warn "Running allele evaluation (rtg vcfeval)...\n";
	$cmd = "($root/rtg vcfeval -t $opts{s} -b $prefix.truth.vcf.gz -c $prefix.test.vcf.gz -o $prefix.veg) 2>> $prefix.log";
	system($cmd) unless -d "$prefix.veg";

	@tot = &get_cnt("$prefix.truth.vcf.gz", $root);
	@fp[0..1] = &get_cnt("$prefix.vea/fp.vcf.gz", $root);
	@fp[2..3] = &get_cnt("$prefix.veg/fp.vcf.gz", $root);
	@fn[0..1] = &get_cnt("$prefix.vea/fn.vcf.gz", $root);
	@fn[2..3] = &get_cnt("$prefix.veg/fn.vcf.gz", $root);

	print OUT "allelic\tSNP\tTP\t", $tot[0] - $fn[0], "\n";
	print OUT "allelic\tSNP\tFN\t", $fn[0], "\n";
	print OUT "allelic\tSNP\tFP\t", $fp[0], "\n";
	print OUT "allelic\tINDEL\tTP\t", $tot[1] - $fn[1], "\n";
	print OUT "allelic\tINDEL\tFN\t", $fn[1], "\n";
	print OUT "allelic\tINDEL\tFP\t", $fp[1], "\n";
	print OUT "genotypic\tSNP\tTP\t", $tot[0] - $fn[2], "\n";
	print OUT "genotypic\tSNP\tFN\t", $fn[2], "\n";
	print OUT "genotypic\tSNP\tFP\t", $fp[2], "\n";
	print OUT "genotypic\tINDEL\tTP\t", $tot[1] - $fn[3], "\n";
	print OUT "genotypic\tINDEL\tFN\t", $fn[3], "\n";
	print OUT "genotypic\tINDEL\tFP\t", $fp[3], "\n";
}

close(OUT);

sub which {
	my $file = shift;
	my $path = (@_)? shift : $ENV{PATH};
	return if (!defined($path));
	foreach my $x (split(":", $path)) {
		$x =~ s/\/$//;
		return "$x/$file" if (-x "$x/$file");
	}
	return;
}

sub test_contig {
	my $fn = shift;
	my @ctg = ();
	open(FH, $fn =~ /\.gz$/? "gzip -dc $fn |" : $fn) || die;
	while (<FH>) {
		last unless /^#/;
		my ($id, $len);
		if (/^##contig/) {
			$id = $1 if /ID=([^\s,]+)/;
			$len = $1 if /length=(\d+)/;
		}
		push(@ctg, [$id, $len]) if defined($id) && defined($len);
	}
	close(FH);
	return @ctg;
}

sub print_ctg {
	my $ctg = shift;
	my $fn = shift;
	open(FH, ">$fn") || die;
	for (@$ctg) {
		print FH "$_->[0]\t$_->[1]\n";
	}
	close(FH);
}

sub get_cnt {
	my $fn = shift;
	my $root = shift;
	open(FH, "$root/k8 $root/hapdip.js qst1 $fn |") || die;
	my ($sub, $gap) = (0, 0);
	while (<FH>) {
		chomp;
		my @t = split;
		$sub = $t[2] + $t[3] + $t[4] + $t[5];
		$gap = $t[8] + $t[9] + $t[10] + $t[11];
	}
	close(FH);
	return ($sub, $gap);
}
